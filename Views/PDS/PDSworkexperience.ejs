
<script>
    const workexperiences = [];
</script>
<div class="row align-items-center">
    <form class="mt-1 pds-form" >
        <label class=" formHeader" for="PD-EASE">Work Experiences</label>
        <div class="row justify-content-center">
            <div class="col-lg-10 custom-padding-left">
                <button class="btn btn-primary form-btn" type="submit">Save</button>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-lg-5 col-sm-10 custom-padding-left">
                <a class="btn btn-light bg-flagged  my-3" id="AddChild" onclick="addworkexperience()">+ add</a>
                <label class="" for="positionTitle">Position Title: </label>
                <input class="" id="positionTitle" name="positionTitle" placeholder="Write in full do not Abbreviate" value="" >
                <label class=" formsubHeader" for="spouse">Inclusive Dates: </label>
                <label class="" for="workedFrom">From: </label>
                <input class="" type="date" id="workedFrom" name="workedFrom" placeholder="Starting Date" value="" >
                <label class="" for="workedTo">To: </label>
                <input class="" type="date" id="workedTo" name="workedTo" placeholder="Ending Date" value="" >

                <label class="" for="daoc">Department/Agency/Office/Company: </label>
                <input class="" id="daoc" name="daoc" placeholder="Write in full do not Abbreviate" value="" >
                <label class=""  for="monthlySalary">Monthly Salary: </label>
                <input type="number"class="" id="monthlySalary" name="monthlySalary" placeholder="do not put comma (,)" value="" >
                <label class="" for="salaryJobPayGrade">Salary/Job/Pay Grade and  Step(Format "00-0")/Increment: </label>
                <input class="" id="salaryJobPayGrade" name="salaryJobPayGrade" placeholder="Salary/Job/Pay Grade" value="" >
                <label class="" for="statusOfAppointment">Status of Appointment: </label>
                <input class="" id="statusOfAppointment" name="statusOfAppointment" placeholder="Write in full do not Abbreviate" value="" >
                <label class="" for="govtService">Gov't Service?(y/n): </label><br>
                <select id="govtService" name="govtService">
                    <option value="false">No</option>
                    <option value="true" >Yes</option>
                </select>
            </div>
            <div class="col-lg-5 col-sm-10 custom-padding-left">
                <% if(we) {if (we.we === null) {} else {%><% for( var workexperience of we.we ) { %>
                    <!-- add all the current childrens to the array -->

                    <script data-workedfrom="<%- workexperience.workedFrom.toDateString() %>" data-workedto="<%- workexperience.workedTo.toDateString() %>" 
                        data-positiontitle="<%- workexperience.positionTitle %>" data-daoc="<%- workexperience.daoc%>"
                        data-monthlysalary="<%- workexperience.monthlySalary%>" data-salaryjobpaygrade="<%- workexperience.salaryJobPayGrade %>"
                        data-statusofappointment="<%- workexperience.statusOfAppointment%>" data-govtservice="<%- workexperience.govtService %>">
                        
                        workedFrom = document.currentScript.dataset.workedfrom;
                        workedTo = document.currentScript.dataset.workedto;
                        positionTitle = document.currentScript.dataset.positiontitle;
                        daoc = document.currentScript.dataset.daoc;
                        monthlySalary = document.currentScript.dataset.monthlysalary;
                        salaryJobPayGrade = document.currentScript.dataset.salaryjobpaygrade;
                        statusOfAppointment = document.currentScript.dataset.statusofappointment;
                        govtService = document.currentScript.dataset.govtservice;

                        console.log({workedFrom, workedTo, positionTitle, daoc, monthlySalary, salaryJobPayGrade, statusOfAppointment, govtService})
                        workexperiences.push( {workedFrom, workedTo, positionTitle, daoc, monthlySalary, salaryJobPayGrade, statusOfAppointment, govtService} );
                    </script>

                <% } %><%}}%>
                <label class=" formsubHeader" for="workexperiences">Work Experiences</label>
                <label class="" for="schooLevel">Click Add after filling up to save entry </label>
                <label class="" for="schooLevel">Entries Will Show Here</label>
                <label class="" for="schooLevel">Only Those below Here will be saved</label>
                <hr>
                <div id="referenceblock1" class="referenceblock"></div>
            </div>
        </div>
        <input type="hidden" name="userId" id="userId" value="<%= user._id %>">
    </form>
    
    
</div>
<script >
    const referenceblock = document.getElementById('referenceblock1');
    const form = document.querySelector('form');
    function printworkexperience() {
        workexperiences.forEach((workexperience, index) => {
            var cardblock = document.createElement("div");
            cardblock.className = "card";
            var cardbody = document.createElement("div");
            cardbody.className = "card-body";
    
            // Create h1 element
            var positionTitleblock = document.createElement("h1");
            positionTitleblock.textContent = workexperience.positionTitle;
        
            // Create p element for worked from
            var workedFromblock = document.createElement("p");
            workedFromblock.textContent = 'Worked From: ' + workexperience.workedFrom;

            // Create p element for worked to
            var workedToblock = document.createElement("p");
            workedToblock.textContent = 'Worked To: ' + workexperience.workedTo;

            // Create p element for date of appointment or contract
            var daocblock = document.createElement("p");
            daocblock.textContent = 'Date of Appointment or Contract: ' + workexperience.daoc;

            // Create p element for monthly salary
            var monthlySalaryblock = document.createElement("p");
            monthlySalaryblock.textContent = 'Monthly Salary: ' + workexperience.monthlySalary;

            // Create p element for salary job pay grade
            var salaryJobPayGradeblock = document.createElement("p");
            salaryJobPayGradeblock.textContent = 'Salary Job Pay Grade: ' + workexperience.salaryJobPayGrade;

            // Create p element for status of appointment
            var statusOfAppointmentblock = document.createElement("p");
            statusOfAppointmentblock.textContent = 'Status of Appointment: ' + workexperience.statusOfAppointment;

            // Create p element for government service
            var govtServiceblock = document.createElement("p");
            govtServiceblock.textContent = 'Government Service: ' + workexperience.govtService;

            // Create delete button for deleting this child's information
            var deleteButton = document.createElement("a");
            deleteButton.className = 'btn deleteButton'; // Use className to assign a class
            
            var deleticon = document.createElement("i");
            deleticon.className = 'lni lni-eraser';
            deleteButton.appendChild(deleticon)
            
            
            // Add event listener to delete button
            deleteButton.addEventListener("click", function() {
                // Remove child's information and the delete button from the DOM
                referenceblock.removeChild(cardblock);
                
                // Remove child's data from the 'children' array
                workexperiences.splice(index);
            });
            referenceblock.appendChild(cardblock);
            cardblock.appendChild(cardbody);
        
            // Append child's name, birthday, and delete button to reference block
            cardbody.appendChild(positionTitleblock);
            cardbody.appendChild(workedFromblock);
            cardbody.appendChild(workedToblock);
            cardbody.appendChild(daocblock);
            cardbody.appendChild(monthlySalaryblock);
            cardbody.appendChild(salaryJobPayGradeblock);
            cardbody.appendChild(statusOfAppointmentblock);
            cardbody.appendChild(govtServiceblock);
            cardbody.appendChild(deleteButton);
    
        
        });
    }
    printworkexperience()
    
    function addworkexperience() {
        const workedFrom = document.getElementById('workedFrom');
        const workedTo = document.getElementById('workedTo');
        const positionTitle = document.getElementById('positionTitle');
        const daoc = document.getElementById('daoc');
        const monthlySalary = document.getElementById('monthlySalary');
        const salaryJobPayGrade = document.getElementById('salaryJobPayGrade');
        const statusOfAppointment = document.getElementById('statusOfAppointment');
        const govtService = document.getElementById('govtService');
        const referenceblock = document.getElementById('referenceblock1');
    
        // Check if all fields are not empty
        if (workedFrom.value.trim() === '' || workedTo.value.trim() === '' || positionTitle.value.trim() === ''
            || daoc.value.trim() === '' || monthlySalary.value.trim() === '' || salaryJobPayGrade.value.trim() === ''
            || statusOfAppointment.value.trim() === '' || govtService.value.trim() === '') {
            // If any field is empty, display an alert or handle the error accordingly
            alert('Please fill in all fields');
            return; // Exit the function early
        }
    
        // If all fields are filled, proceed with other actions
        workexperiences.push({
            workedFrom: workedFrom.value,
            workedTo: workedTo.value,
            positionTitle: positionTitle.value,
            daoc: daoc.value,
            monthlySalary: monthlySalary.value,
            salaryJobPayGrade: salaryJobPayGrade.value,
            statusOfAppointment: statusOfAppointment.value,
            govtService: govtService.value
        });
        console.log(workexperiences, 'hello');
    
        // Clear the referenceblock
        while (referenceblock.firstChild) {
            referenceblock.removeChild(referenceblock.firstChild);
        }
    
        printworkexperience();
        workedFrom.value = '';
        workedTo.value = '';
        positionTitle.value = '';
        daoc.value = '';
        monthlySalary.value = '';
        salaryJobPayGrade.value = '';
        statusOfAppointment.value = '';
        govtService.value = '';
    }

    
    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const userId = form.userId.value;
         
    
        console.log({userId, workexperiences} );
        
        if(workexperiences.length > 0){
            try{
                const res = await fetch('/workexperience', {
                  method: 'POST',
                  body: JSON.stringify({userId, we: workexperiences}),
                  headers: { 'Content-Type': 'application/json' }
                });
                const data = await res.json();
                    if(data.errors){
                        localStorage.setItem('notification', 'Saving Data Failed.');
                      location.assign('/workexperience/<%=user._id%>');
                    }
                    if (data.status){
                        localStorage.setItem('notification', 'Data saved successfully.');
                      location.assign('/workexperience/<%=user._id%>');
                    }
              }
              catch (err){
              }
        }else {
            localStorage.setItem('notification', 'Please Input atleast 1 Data before saving');
            location.assign('/workexperience/<%=user._id%>');
        }
        
      
      })
</script>
